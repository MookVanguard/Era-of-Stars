import net.divby0.vw.data.Gfx_Icon;
import net.divby0.vw.map.Map_Object;
import net.divby0.vw.data.Value;
import net.divby0.nm.NeumannGame;
import org.newdawn.slick.Color;
import org.newdawn.slick.Image;

import net.divby0.vw.data.BlackBody;

int img = -1;
int img2 = -1;

// This function is used to draw the 'close-up' picture of the object
draw_icon(g, obj, xx, yy, radius, alpha) {
		
}

// This function is used to draw the object on the map
draw_map(g, obj, xx, yy, dx, zoom, au_per_unit) {	
	
	//float radius = zoom * dx * (float) Math.pow(obj.getRadius()/ 149597871000f, 1f) / au_per_unit;
	float radius = Math.max(1+2*Math.min(obj.getRadius()/10000000, 2), zoom * dx * obj.getRadius()/ 149597871000f / au_per_unit);
	
	if (img == -1) {
		img = g.get("data/img/gradient_star.png");
	}
	
	if (img2 == -1) {
		img2 = g.get("data/img/star.png");
	}
	
	if (img >= 0) {
		Image atmosphere = g.get(img);
		float scale = 1 + 1.5f * Math.pow(zoom, .25);
		atmosphere.getScaledCopy(2f * scale * radius/(float) atmosphere.getWidth()).draw(xx - scale * radius, yy - scale * radius, obj.getColor_outer().multiply(new Color(1, 1, 1, .4f)));
	}
	
	//g.setColor(obj.getColor_inner().darker(.2f));
	//g.fillOval(xx -radius, yy -radius, radius*2, radius*2);
	
	if (img2 >= 0) {
		Image atmosphere = g.get(img2);
		float scale = 1.75f;
		atmosphere.getScaledCopy(2f * scale * radius/(float) atmosphere.getWidth()).draw(xx - scale * radius, yy - scale * radius, obj.getColor_inner().multiply(obj.getColor_inner()));
		float scale = 1.5f;
		atmosphere.getScaledCopy(2f * scale * radius/(float) atmosphere.getWidth()).draw(xx - scale * radius, yy - scale * radius, obj.getColor_inner());
	}
	
}

// Returns the 'size' of the object independently of the actual drawing
get_size(obj, dx, zoom, au_per_unit) {
	return 4f + Math.max(Math.min(14, Math.max(8 + zoom, 8)), 1.8f * zoom * dx * obj.getRadius()/ 149597871000f / au_per_unit);
}

// Returns an array of Value objects. A value is 3 fields, constructor is new Value(String name, double value, String unit). The double can also be a float.
// If you want a blank word with no value, set the units to null
get_tooltip(obj) {
	if (obj.getOrbitalPeriod() > 0) {
		Value[] ret = new Value[11];
		int n = 0;
		ret[n++] = new Value("Spectral Type: " + obj.getSun().getSpectralClass(), 0, null);
		ret[n++] = new Value("Mass: ", obj.getMass()/1000f, " tons");
		ret[n++] = new Value("Temperature: ", obj.getTemperature(), " K");
		ret[n++] = new Value("Luminosity: ", obj.getLuminosity(), " W");
		ret[n++] = new Value("Radius: ", obj.getRadius()/1000f, " km");
		ret[n++] = new Value("Age: ", obj.getSun().getAge(), " My");
		ret[n++] = new Value("", 0, null);
		ret[n++] = new Value("Orbital Radius: ", obj.getOrbit().getRadius(), " m");
		ret[n++] = new Value("Orbital Period: ", obj.getOrbit().getPeriod()/31536000f, " yr");
		return ret;
	} else {
		Value[] ret = new Value[6];
		int n = 0;
		ret[n++] = new Value("Spectral Type: " + obj.getSun().getSpectralClass(), 0, null);
		ret[n++] = new Value("Mass: ", obj.getMass()/1000f, " tons");
		ret[n++] = new Value("Temperature: ", obj.getTemperature(), " K");
		ret[n++] = new Value("Luminosity: ", obj.getLuminosity(), " W");
		ret[n++] = new Value("Radius: ", obj.getRadius()/1000f, " km");
		ret[n++] = new Value("Age: ", obj.getSun().getAge(), " My");
		return ret;
	}
}


return (Gfx_Icon) this;