import net.divby0.vw.data.Type_Star_Ev;
import net.divby0.vw.data.BlackBody;
import net.divby0.vw.map.Map_Star;
import net.divby0.vw.map.Map_Body;
import net.divby0.vw.map.Map_Parent;
import java.util.Random;
import org.newdawn.slick.Color;
import net.divby0.vw.world.World_Universe;

// This is the 'evolution equation,' which governs the stars properties with respect to its age.
// If a stars age is bigger than its lifetime it will generally be some kind of stellar remnant
update(t, obj, parent) {

	int stage = 0; 
	
	double l = obj.getVariable("Starting L"); 
	double m = obj.getVariable("Starting M");
	double T = obj.getVariable("Starting T");
	
	double nebula_duration = 8.33e-7d;
	
	double mm = 1-(.5*Math.pow(m, .5)+m/2.5)/m; // final white dwarf mass
	
	double proto = .000025d * Math.pow(m, 7) + 700d * Math.pow(.05, m); // A pretty innaccurate equation, but good enough
	
	//////////////////////////////////////////////
	double main_sequence = proto/obj.getLifetime();						// before this is the protostar stage
	double subgiant_point = .8d;										// Only medium-mass stars (.15 and up) become subgiants
	double redgiant = .9d;												// Only high-mass stars (.25 and up) become red giants
	double heliumflash = .95d;											// Only massive stars (.45 and up) have a helium flash, start building protoplanetary neb
	double agb = 1d - nebula_duration - (mm*m/0.000001)/obj.getLifetime();		// Similar, but different from the solar type. Only for the biggest stars (.45+)
	// Mass loss rate is 1 solar mass/100,000,000 years, or 0.000001 million years
	double pnebA = 1d - nebula_duration;										// Phase 1: constant luminosity, grows hotter
	double pnebB = 1d - nebula_duration/2d;										// Phase 2: luminosity plummets down to white dwarf level
	// The star will be considered a planetary nebula, while the rapidly-cooling core will be considered a blue subdwarf
	double whitedwarf = 1d;												// After the star crosses the edge of its lifetime, it will become a white dwarf
	
	double p = t;
	double u = (p-main_sequence)/subgiant_point;
	// p = percentage of lifetime passed
	// u = percentage of current stage

	// 0 = Main Sequence, 1 = Subgiant, 2 = Red Giant
	if (p > whitedwarf) {
		u = (p - whitedwarf)*obj.getLifetime()/1000d; // billions of years
		stage = 7;
	} else if (p > pnebB && m > 0.45) {
		u = (p - pnebB) / (pnebA - pnebB);
		stage = 6;
	} else if (p > pnebA && m > 0.45) {
		u = (p - pnebA) / (agb - pnebA);
		stage = 5;
	} else if (p > agb && m > 0.45) {
		u = (p - agb) / (pnebA - agb);
		stage = 4;
	} else if (p > heliumflash && m > 0.45) {
		u = (p - heliumflash) / (agb - heliumflash);
		stage = 3;
	} else if (p > redgiant && m > 0.25) {
		if (m > .45) {
			u = (p - redgiant) / (heliumflash - redgiant);
		} else {
			u = (p - redgiant) / (whitedwarf - redgiant);
		}
		stage = 2;
	} else if (p > subgiant_point && m > 0.15) {
		if (m > .25) {
			u = (p - subgiant_point) / (redgiant - subgiant_point);
		} else {
			u = (p - subgiant_point) / (whitedwarf - subgiant_point);
		}

		stage = 1;
	} else if (p < main_sequence) {
		u = p / main_sequence;
		stage = -1;
	}
	
	// Advance along the H-R diagram according to the lifecycle stage.
	switch (stage) {
	case -1: {
		obj.setLuminosity(Math.pow(10, .7*l + (1 - u)*2/(m + 1)));
		obj.setTemperature(T*(2450/T + u*(1 - 2450/T)));
		break;}
		
	case 1: {
		obj.setLuminosity(Math.pow(10, l + .2 + u));
		obj.setTemperature(T*(1 + 900/T - u*(.8 - 2350/T)));
		break;}
		
	case 2: {
		obj.setLuminosity(Math.pow(10, l + 1.2 + (.8 - .8*l)*Math.sqrt(u)));
		obj.setTemperature(T*(.2 + 3250/T - u*(.18 + 250/T)));
		break;}
		
	case 3: {
		obj.setLuminosity(Math.pow(10, 2.2 + .2*l - (.5)*Math.sqrt(u)));
		obj.setTemperature(T*(.02 + 3000/T + u*(.5)));
		break;}
		
	case 4: {
		obj.setMass(m*(1d-mm*u));
		obj.setLuminosity(Math.pow(10, 1.7 + .2*l + u*(.3)));
		obj.setTemperature(T*(.5 + 3000/T - u*(.45 + 250/T)));
		break;}
		
	case 5: {
		obj.setMass(m*mm);
		obj.setLuminosity(Math.pow(10, 2 + .2*l));
		obj.setTemperature(T*(0.05 + 2750/T + u*(Math.pow(T/5778d, .5)*997750/T)));
		break;}
		
	case 6: {
		obj.setMass(m*mm);
		obj.setLuminosity(Math.pow(10, 2 + .2*l - (4.5 + .2*l)*u));
		obj.setTemperature(Math.pow(T/5778d, .5)*100000);
		break;}
		
	case 7: {
		obj.setMass(m*mm);
		
		double tt = Math.pow(T/5778d, .5)*100000*Math.pow(1+1900*u, -.333333)/5778d;
		double rr = 0.0125*Math.pow(m/2, -1d/3d);
	
		obj.setRadius(rr);
		obj.setTemperature(tt*5778);
		
		obj.setLuminosity(rr*rr*tt*tt*tt*tt);
		break;}
	
	default: {
		obj.setLuminosity(Math.pow(10, l - .3 + u*.4));
		obj.setTemperature(T*(1 + u*(900/T)));
		break;}
	}
		
	//////////////////////////////////////////////
					
	obj.setRadius(Math.sqrt(obj.getLuminosity() / Math.pow(obj.getTemperature() / 5778d, 4)));
	
	obj.getSun().setRadius(obj.getRadius()*695500000f);
	obj.getSun().setLuminosity(3.846e26f*obj.getLuminosity());							//Watts
	obj.getSun().setTemperature(obj.getTemperature());									//Kelvin
		
	//obj.setMass(m);
	//obj.getSun().setMass(m*1.9891e30f);
		
	obj.getSun().changeMass(obj.getMass()*1.9891e30f - obj.getSun().getMass());
	
	// color info and graphics
	if (stage != 0) {
		obj.setColor_inner(BlackBody.getColor(obj.getTemperature()/1.4));
	} else {
		obj.setColor_inner(BlackBody.getColor(obj.getTemperature()));
	}
	obj.setColor_outer(obj.getColor_inner());
	obj.getSun().setColor_inner(BlackBody.getColor(obj.getTemperature()));
	if (stage < 2) {
		obj.getSun().setColor_outer(BlackBody.getColor(5000));
	} else {
		obj.getSun().setColor_outer(BlackBody.getColor(obj.getTemperature()));
	}


	obj.setSpectralClass();
	String sclass = obj.getSpectralClass();
				String color = "";
				switch (sclass.substring(0, 1)) {
					case "M": color = "Red"; break;
					case "K": color = "Orange"; break;
					case "G": color = "Yellow"; break;
					case "F": color = "White"; break;
					case "A": color = "Bluish White"; break;
					case "B": color = "Blue-White"; break;
					case "O": color = "Blue"; break;
				}
	
	
	//obj.setColor_inner(BlackBody.getColor(obj.getTemperature()/(1f + 0.2f*stage)));
	
	
	
	
	if (obj.getLuminosity() > 8000) {
		obj.setDesignation(color + " Supergiant");
		obj.getSun().setDesignation(obj.getDesignation());
		obj.setSpectralClass(obj.getSpectralClass() + " I");
	} else if (obj.getLuminosity() > 1000) {
		obj.setDesignation(color + " Bright Giant ");
		obj.getSun().setDesignation(obj.getDesignation());
		obj.setSpectralClass(obj.getSpectralClass() + " II");
	} else if (obj.getLuminosity() > 100) {
		obj.setDesignation(color + " Giant ");
		obj.getSun().setDesignation(obj.getDesignation());
		obj.setSpectralClass(obj.getSpectralClass() + " III");
	} else if (obj.getLuminosity() > 10) {
		obj.setDesignation(color + " Subgiant ");
		obj.getSun().setDesignation(obj.getDesignation());
		obj.setSpectralClass(obj.getSpectralClass() + " IV");
	} else if (stage < 5 && stage > -1) {
		obj.setDesignation("Main-Sequence Star");
		obj.getSun().setDesignation(obj.getDesignation());
		obj.setSpectralClass(obj.getSpectralClass() + " V");
	}
	
	if (stage == 5 || stage == 6) {
		obj.setColor_inner(Color.red);
		obj.setColor_outer(Color.green);
		obj.setColor_bg(obj.getSun().getColor_bg().multiply(new Color(.9f, .9f, .9f, 1f)));
		obj.setDesignation("Planetary Nebula");
		obj.getSun().setDesignation(color + " Subdwarf");
		obj.setSpectralClass(obj.getSpectralClass() + " sd");
	}
	
	if (stage == 7) {
		obj.setColor_inner(BlackBody.getColor(obj.getTemperature()));
		obj.setColor_outer(Color.white);
		obj.setColor_bg(obj.getSun().getColor_bg().multiply(new Color(.2f, .2f, .2f, 1f)));
		obj.setDesignation("White Dwarf");
		obj.getSun().setDesignation(obj.getDesignation());
		obj.setSpectralClass("D");
	}
	
	if (stage == -1) {
		obj.setSpectralClass();
		obj.setColor_inner(Color.black);
		obj.setDesignation("T-Tauri Star");
		obj.getSun().setDesignation(obj.getDesignation());
	}
	
	String prefix = "";
	switch (obj.getBinaryCount()) {
		case 2: prefix = "Binary "; break;
		case 3: prefix = "Trinary "; break;
		case 4: prefix = "Quaternary "; break;
		case 5: prefix = "Quintenary  "; break;
		case 6: prefix = "Sextenary "; break;
		case 7: prefix = "Septenary "; break;
	}
	
	obj.setDesignation(prefix + obj.getDesignation());
		
	return true;
}

return (Type_Star_Ev) this;